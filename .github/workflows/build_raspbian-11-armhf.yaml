name: Build raspbian-11-armhf

on:
  push:
    paths:
      - 'puppetlabs/raspbian-11-armhf/*'
      - '.github/workflows/build_raspbian-11-armhf.yaml'
  create:
  workflow_dispatch:
  # Manual trigger for testing.
  repository_dispatch:
    types:
      - raspbian-11-armhf
      - all

env:
  PLATFORM_TAG: raspbian-11-armhf
  DOCKER_TAG: '${{ github.sha }}'
  DOCKERFILE: puppetlabs/raspbian-11-armhf

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Setup QEMU
        run: |
          sudo apt install -y qemu-user-static binfmt-support
      - name: Build Docker images
        run: |
          # Raspbian is a bit different. It needs a two-stage build,
          # but there's a privileged bit in the middle where a chroot
          # environment gets built. However, docker build don't do
          # privileges. Because reasons.
          cd $DOCKERFILE
          docker build . -f Dockerfile.build --tag raspbian-build
          docker run --rm --privileged -v "${PWD}:/output" raspbian-build
          docker build . --tag $PLATFORM_TAG:$DOCKER_TAG
      - name: Export Docker images
        run: docker save -o docker-images.tar $PLATFORM_TAG:$DOCKER_TAG
      - uses: actions/upload-artifact@v1
        with:
          name: docker-images.tar
          path: docker-images.tar

  test:
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v1
        with:
          name: docker-images.tar
          path: '.'
      - name: Import Docker images
        run: docker load -i docker-images.tar
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.5'
      - name: Setup QEMU
        run: |
          sudo apt install -y qemu-user-static binfmt-support
      - name: Provision test tools
        run: |
          gem install bundler
          bundle config set path .bundle/lib
          bundle install
          bundle exec rake spec_prep
      - name: Stage test container
        run: |
          run_args=$(docker inspect "${PLATFORM_TAG}:${DOCKER_TAG}" --format '{{ index .Config.Labels "docker-run-args" }}')
          bundle exec bolt --modulepath spec/fixtures/modules \
            task run provision::docker_exp --target localhost \
            action=provision \
            platform="${PLATFORM_TAG}:${DOCKER_TAG}" \
            vars="docker_run_opts: ['${run_args}']"
      - name: Run Serverspec tests
        run: bundle exec rake litmus:acceptance:parallel

  ship:
    if: "github.event_name == 'create' && github.event.ref_type == 'tag'"
    runs-on: ubuntu-22.04
    needs: test
    env:
      # NOTE: `github.ref` resolves to `refs/tags/<name>` instead of
      #       just `<name>`.
      GIT_REF: '${{ github.ref }}'
    steps:
      - name: Log into Docker registry
        env:
          DOCKER_CRED: '${{ secrets.CR_PAT }}'
        run: echo $DOCKER_CRED | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
      - uses: actions/download-artifact@v1
        with:
          name: docker-images.tar
          path: '.'
      - name: Import Docker images
        run: docker load -i docker-images.tar
      - name: Tag Docker images
        run: |
          tag_name=$(basename "${GIT_REF}")
          docker tag "${PLATFORM_TAG}:${DOCKER_TAG}" "ghcr.io/sharpie/${PLATFORM_TAG}:${tag_name}"
          docker tag "${PLATFORM_TAG}:${DOCKER_TAG}" "ghcr.io/sharpie/${PLATFORM_TAG}:latest"
      - name: Shipit
        run: |
          tag_name=$(basename "${GIT_REF}")
          docker push "ghcr.io/sharpie/${PLATFORM_TAG}:${tag_name}"
          docker push "ghcr.io/sharpie/${PLATFORM_TAG}:latest"
